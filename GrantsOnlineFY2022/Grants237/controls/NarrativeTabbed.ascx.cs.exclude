using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;

public partial class controls_NarrativeTabbed : System.Web.UI.UserControl
{
    DAL dal = new DAL();

    protected void Page_Load(object sender, EventArgs e)
    {
        this.Page.MaintainScrollPositionOnPostBack = true;

        if (!IsPostBack)
        {
            LoadData(); 
        }

        CalculateWordCounts();
    }

    private void CalculateWordCounts()
    {
        char[] splitter = { ' ' };

        //IT text
        txtITSectionCount.Text = (txtITSection.Text.Trim().Split(splitter).Length).ToString();

        if (txtITSection.Text.Trim() == "")
            txtITSectionCount.Text = "0";

        //PS text
        txtPSSectionCount.Text = (txtPSSection.Text.Trim().Split(splitter).Length).ToString();

        if (txtPSSection.Text.Trim() == "")
            txtPSSectionCount.Text = "0";

        //OST
        txtOSTSectionCount.Text = (txtOSTSection.Text.Trim().Split(splitter).Length).ToString();

        if (txtOSTSection.Text.Trim() == "")
            txtOSTSectionCount.Text = "0";

        //FCC
        txtFCCSectionCount.Text = (txtFCCSection.Text.Trim().Split(splitter).Length).ToString();

        if (txtFCCSection.Text.Trim() == "")
            txtFCCSectionCount.Text = "0";


    }

    public void SetVisibility(bool showIT, bool showPS, bool showOST, bool showFCC)
    {
        if (!showIT && !showPS && !showOST && !showFCC)
            NextPage();

        DisplayMenu_IT(showIT);
        DisplayMenu_PS(showPS);
        DisplayMenu_OST(showOST);
        DisplayMenu_FCC(showFCC);

        if (showIT)
            ActivateITSection(true);
        else if (showPS)
            ActivatePSSection(true);
        else if (showOST)
            ActivateOSTSection(true);
        else
            ActivateFCCSection(true);

    }

    private void SetDefaultActiveSection(string sectionType)
    {
    }

    private void DisplayMenu_IT(bool show)
    {
        tblMenu.Rows[0].Cells[0].Visible = show;
    }

    public void ActivateITSection(bool show)
    {

        tblMenu.Rows[0].Cells[0].Attributes.Add("class", "SelectedTab");
        tblMenu.Rows[0].Cells[2].Attributes.Add("class", "NormalTab");
        tblMenu.Rows[0].Cells[4].Attributes.Add("class", "NormalTab");
        tblMenu.Rows[0].Cells[6].Attributes.Add("class", "NormalTab");

        pnlITSection.Visible = show;
        pnlPSSection.Visible = !show;
        pnlOSTSection.Visible = !show;
        pnlFCCSection.Visible = !show;

        ViewState["ActiveTab"] = "IT";
    }

    private void DisplayMenu_PS(bool show)
    {
        tblMenu.Rows[0].Cells[1].Visible = show;
        tblMenu.Rows[0].Cells[2].Visible = show;
    }

    public void ActivatePSSection(bool show)
    {
        pnlITSection.Visible = !show;
        pnlPSSection.Visible = show;
        pnlOSTSection.Visible = !show;
        pnlFCCSection.Visible = !show;

        tblMenu.Rows[0].Cells[0].Attributes.Add("class", "NormalTab");
        tblMenu.Rows[0].Cells[2].Attributes.Add("class", "SelectedTab");
        tblMenu.Rows[0].Cells[4].Attributes.Add("class", "NormalTab");
        tblMenu.Rows[0].Cells[6].Attributes.Add("class", "NormalTab");

        ViewState["ActiveTab"] = "PS";
    }
    private void DisplayMenu_OST(bool show)
    {
        tblMenu.Rows[0].Cells[3].Visible = show;
        tblMenu.Rows[0].Cells[4].Visible = show;

    }

    public void ActivateOSTSection(bool show)
    {
        pnlITSection.Visible = !show;
        pnlPSSection.Visible = !show;
        pnlOSTSection.Visible = show;
        pnlFCCSection.Visible = !show;

        tblMenu.Rows[0].Cells[0].Attributes.Add("class", "NormalTab");
        tblMenu.Rows[0].Cells[2].Attributes.Add("class", "NormalTab");
        tblMenu.Rows[0].Cells[4].Attributes.Add("class", "SelectedTab");
        tblMenu.Rows[0].Cells[6].Attributes.Add("class", "NormalTab");

        ViewState["ActiveTab"] = "OST";
    }
    private void DisplayMenu_FCC(bool show)
    {
        tblMenu.Rows[0].Cells[5].Visible = show;
        tblMenu.Rows[0].Cells[6].Visible = show;

        
    }

    public void ActivateFCCSection(bool show)
    {
        pnlITSection.Visible = !show;
        pnlPSSection.Visible = !show;
        pnlOSTSection.Visible = !show;
        pnlFCCSection.Visible = show;

        tblMenu.Rows[0].Cells[0].Attributes.Add("class", "NormalTab");
        tblMenu.Rows[0].Cells[2].Attributes.Add("class", "NormalTab");
        tblMenu.Rows[0].Cells[4].Attributes.Add("class", "NormalTab");
        tblMenu.Rows[0].Cells[6].Attributes.Add("class", "SelectedTab");

        ViewState["ActiveTab"] = "FCC";
    }


    private void ShowMessage(string message, bool success)
    {
        lblMessage.Font.Bold = true;

        if (success)
        {
            lblMessage.Text = message;
            lblMessage.ForeColor = System.Drawing.Color.DarkGreen;
            
        }
        else
        {
            lblMessage.Text = message;
            lblMessage.ForeColor = System.Drawing.Color.DarkRed;
        }
    }

    private void LoadData()
    {

        DataSet ds = dal.GetPMTRFRQuestions(Convert.ToInt32(Session["RFRId"]));
        string maxCharCount = "250";

        //set the javascript attributes
        #region Switch cases for char count
        switch (Session["PageName"].ToString())
        {
            case "DevelopmentalScreening":
                maxCharCount = "250"; break;

            case "ChildAssessment":
                maxCharCount = "500"; break;

            case "Curriculum":
                maxCharCount = "500"; break;

            case "Transitions":
                maxCharCount = "250"; break;

            case "FamilyEngagement":
                maxCharCount = "250"; break;

            case "ProfessionalDevelopment":
                maxCharCount = "500"; break;

            case "ComprehensiveServices":
                maxCharCount = "250"; break;

            case "CollaborationsSharedServices":
                maxCharCount = "500"; break;

            case "FCCSystemsSupportStructure":
                maxCharCount = "750"; break;

            case "FCCSystemsServicesToproviders":
                maxCharCount = "500"; break;

            default:
                maxCharCount = "250"; break;
        }
        #endregion

        txtITSection.Attributes.Add("onkeyup", "javascript:textCounterKeyUp(this, " + maxCharCount + ");");
        txtPSSection.Attributes.Add("onkeyup", "javascript:textCounterKeyUp(this, " + maxCharCount + ");");
        txtOSTSection.Attributes.Add("onkeyup", "javascript:textCounterKeyUp(this, " + maxCharCount + ");");
        txtFCCSection.Attributes.Add("onkeyup", "javascript:textCounterKeyUp(this, " + maxCharCount + ");");

        txtITSection.Attributes.Add("onkeydown", "javascript:textCounterKeyDown(this, " + maxCharCount + ");");
        txtPSSection.Attributes.Add("onkeydown", "javascript:textCounterKeyDown(this, " + maxCharCount + ");");
        txtOSTSection.Attributes.Add("onkeydown", "javascript:textCounterKeyDown(this, " + maxCharCount + ");");
        txtFCCSection.Attributes.Add("onkeydown", "javascript:textCounterKeyDown(this, " + maxCharCount + ");");


        if (ds.Tables[0].Rows.Count > 0)
        {
            DataView dv = new DataView(ds.Tables[0]);

            #region Switch cases for pages
            switch (Session["PageName"].ToString())
            {
                case "DevelopmentalScreening":
                    dv.RowFilter = "AgeGroupsType = 'IT'";
                    txtITSection.Text = (dv.Count > 0 ? dv[0]["PCDevelopmentalScreening"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'PS'";
                    txtPSSection.Text = (dv.Count > 0 ? dv[0]["PCDevelopmentalScreening"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'OST'";
                    txtOSTSection.Text = (dv.Count > 0 ? dv[0]["PCDevelopmentalScreening"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'FCC'";
                    txtFCCSection.Text = (dv.Count > 0 ? dv[0]["PCDevelopmentalScreening"].ToString() : "");

                    break;

                case "ChildAssessment":
                    dv.RowFilter = "AgeGroupsType = 'IT'";
                    txtITSection.Text = (dv.Count > 0 ? dv[0]["PCChildAssessment"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'PS'";
                    txtPSSection.Text = (dv.Count > 0 ? dv[0]["PCChildAssessment"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'OST'";
                    txtOSTSection.Text = (dv.Count > 0 ? dv[0]["PCChildAssessment"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'FCC'";
                    txtFCCSection.Text = (dv.Count > 0 ? dv[0]["PCChildAssessment"].ToString() : "");


                    break;

                case "Curriculum":
                    dv.RowFilter = "AgeGroupsType = 'IT'";
                    txtITSection.Text = (dv.Count > 0 ? dv[0]["PCCurriculum"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'PS'";
                    txtPSSection.Text = (dv.Count > 0 ? dv[0]["PCCurriculum"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'OST'";
                    txtOSTSection.Text = (dv.Count > 0 ? dv[0]["PCCurriculum"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'FCC'";
                    txtFCCSection.Text = (dv.Count > 0 ? dv[0]["PCCurriculum"].ToString() : "");


                    break;

                case "Transitions":
                    dv.RowFilter = "AgeGroupsType = 'IT'";
                    txtITSection.Text = (dv.Count > 0 ? dv[0]["PCTransitions"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'PS'";
                    txtPSSection.Text = (dv.Count > 0 ? dv[0]["PCTransitions"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'OST'";
                    txtOSTSection.Text = (dv.Count > 0 ? dv[0]["PCTransitions"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'FCC'";
                    txtFCCSection.Text = (dv.Count > 0 ? dv[0]["PCTransitions"].ToString() : "");


                    break;

                case "FamilyEngagement":
                    dv.RowFilter = "AgeGroupsType = 'IT'";
                    txtITSection.Text = (dv.Count > 0 ? dv[0]["PCFamilyEngagement"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'PS'";
                    txtPSSection.Text = (dv.Count > 0 ? dv[0]["PCFamilyEngagement"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'OST'";
                    txtOSTSection.Text = (dv.Count > 0 ? dv[0]["PCFamilyEngagement"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'FCC'";
                    txtFCCSection.Text = (dv.Count > 0 ? dv[0]["PCFamilyEngagement"].ToString() : "");

                    break;

                case "ProfessionalDevelopment":
                    dv.RowFilter = "AgeGroupsType = 'IT'";
                    txtITSection.Text = (dv.Count > 0 ? dv[0]["PCProfessionalDevelopment"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'PS'";
                    txtPSSection.Text = (dv.Count > 0 ? dv[0]["PCProfessionalDevelopment"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'OST'";
                    txtOSTSection.Text = (dv.Count > 0 ? dv[0]["PCProfessionalDevelopment"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'FCC'";
                    txtFCCSection.Text = (dv.Count > 0 ? dv[0]["PCProfessionalDevelopment"].ToString() : "");

                    break;

                case "ComprehensiveServices":
                    dv.RowFilter = "AgeGroupsType = 'IT'";
                    txtITSection.Text = (dv.Count > 0 ? dv[0]["PCComprehensiveServices"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'PS'";
                    txtPSSection.Text = (dv.Count > 0 ? dv[0]["PCComprehensiveServices"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'OST'";
                    txtOSTSection.Text = (dv.Count > 0 ? dv[0]["PCComprehensiveServices"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'FCC'";
                    txtFCCSection.Text = (dv.Count > 0 ? dv[0]["PCComprehensiveServices"].ToString() : "");

                    break;

                case "CollaborationsSharedServices":
                    dv.RowFilter = "AgeGroupsType = 'IT'";
                    txtITSection.Text = (dv.Count > 0 ? dv[0]["CollaborationsSharedServices"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'PS'";
                    txtPSSection.Text = (dv.Count > 0 ? dv[0]["CollaborationsSharedServices"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'OST'";
                    txtOSTSection.Text = (dv.Count > 0 ? dv[0]["CollaborationsSharedServices"].ToString() : "");


                    dv.RowFilter = "AgeGroupsType = 'FCC'";
                    txtFCCSection.Text = (dv.Count > 0 ? dv[0]["CollaborationsSharedServices"].ToString() : "");

                    break;

                case "FCCSystemsSupportStructure":
                    dv.RowFilter = "AgeGroupsType = 'IT'";
                    txtITSection.Text = (dv.Count > 0 ? dv[0]["FCCSystemsSupportStructure"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'PS'";
                    txtPSSection.Text = (dv.Count > 0 ? dv[0]["FCCSystemsSupportStructure"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'OST'";
                    txtOSTSection.Text = (dv.Count > 0 ? dv[0]["FCCSystemsSupportStructure"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'FCC'";
                    txtFCCSection.Text = (dv.Count > 0 ? dv[0]["FCCSystemsSupportStructure"].ToString() : "");

                    break;

                case "FCCSystemsServicesToproviders":
                    dv.RowFilter = "AgeGroupsType = 'IT'";
                    txtITSection.Text = (dv.Count > 0 ? dv[0]["FCCSystemsServicesToProviders"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'PS'";
                    txtPSSection.Text = (dv.Count > 0 ? dv[0]["FCCSystemsServicesToProviders"].ToString() : "");

                    dv.RowFilter = "AgeGroupsType = 'OST'";
                    txtOSTSection.Text = (dv.Count > 0 ? dv[0]["FCCSystemsServicesToProviders"].ToString() : "");


                    dv.RowFilter = "AgeGroupsType = 'FCC'";
                    txtFCCSection.Text = (dv.Count > 0 ? dv[0]["FCCSystemsServicesToProviders"].ToString() : "");

                    break;

                default:
                    break;
            }
            #endregion

           


           
        }

    }
    protected void btnSaveSection_Click(object sender, EventArgs e)
    {
        int retVal = 0;
        string textToSave = "";
        string sectionType = ViewState["ActiveTab"].ToString();

        switch (ViewState["ActiveTab"].ToString())
        {
            case "IT":
                textToSave = txtITSection.Text.Trim(); break;
            case "PS":
                textToSave = txtPSSection.Text.Trim(); break;
            case "OST":
                textToSave = txtOSTSection.Text.Trim(); break;
            case "FCC":
                textToSave = txtFCCSection.Text.Trim(); break;
            default:
                textToSave = "NO SECTION SELECTED";
                break;
        }

        switch (Session["PageName"].ToString())
        {
            case "DevelopmentalScreening":
                retVal = dal.SaveQuestions(Convert.ToInt32(Session["RFRId"]), textToSave, "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", sectionType);
                break;

            case "ChildAssessment":
                retVal = dal.SaveQuestions(Convert.ToInt32(Session["RFRId"]), "-1", textToSave, "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", sectionType);
                break;

            case "Curriculum":
                retVal = dal.SaveQuestions(Convert.ToInt32(Session["RFRId"]), "-1", "-1", textToSave, "-1", "-1", "-1", "-1", "-1", "-1", "-1", sectionType);
                break;

            case "Transitions":
                retVal = dal.SaveQuestions(Convert.ToInt32(Session["RFRId"]), "-1", "-1", "-1", textToSave, "-1", "-1", "-1", "-1", "-1", "-1", sectionType);
                break;

            case "FamilyEngagement":
                retVal = dal.SaveQuestions(Convert.ToInt32(Session["RFRId"]), "-1", "-1", "-1", "-1", textToSave, "-1", "-1", "-1", "-1", "-1", sectionType);
                break;

            case "ProfessionalDevelopment":
                retVal = dal.SaveQuestions(Convert.ToInt32(Session["RFRId"]), "-1", "-1", "-1", "-1", "-1", textToSave, "-1", "-1", "-1", "-1", sectionType);
                break;

            case "ComprehensiveServices":
                retVal = dal.SaveQuestions(Convert.ToInt32(Session["RFRId"]), "-1", "-1", "-1", "-1", "-1", "-1", textToSave, "-1", "-1", "-1", sectionType);
                break;

            case "CollaborationsSharedServices":
                retVal = dal.SaveQuestions(Convert.ToInt32(Session["RFRId"]), "-1", "-1", "-1", "-1", "-1", "-1", "-1", textToSave, "-1", "-1", sectionType);
                break;

            case "FCCSystemsSupportStructure":
                retVal = dal.SaveQuestions(Convert.ToInt32(Session["RFRId"]), "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", textToSave, "-1", sectionType);
                break;

            case "FCCSystemsServicesToproviders":
                retVal = dal.SaveQuestions(Convert.ToInt32(Session["RFRId"]), "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", textToSave, sectionType);
                break;

            default:
                retVal = -1;
                break;

        }

        if (retVal > 0)
            ShowMessage("Your response has been saved!", true);
        else
            ShowMessage("Unable to save your response", false);
       
    }
    protected void lbtnIT_Click(object sender, EventArgs e)
    {
        if (ViewState["ActiveTab"] != null)
        {
            btnSaveSection_Click(this, new EventArgs());

        }

        ActivateITSection(true);
        lblMessage.Text = "";

    }
    protected void lbtnPS_Click(object sender, EventArgs e)
    {
        if (ViewState["ActiveTab"] != null)
        {
            btnSaveSection_Click(this, new EventArgs());

        }

        ActivatePSSection(true);
        lblMessage.Text = "";
    }
    protected void lbtnOST_Click(object sender, EventArgs e)
    {
        if (ViewState["ActiveTab"] != null)
        {
            btnSaveSection_Click(this, new EventArgs());

        }

        ActivateOSTSection(true);
        lblMessage.Text = "";
    }
    protected void lbtnFCC_Click(object sender, EventArgs e)
    {
        if (ViewState["ActiveTab"] != null)
        {
            btnSaveSection_Click(this, new EventArgs());

        }

        ActivateFCCSection(true);
        lblMessage.Text = "";
    }
    protected void btnSaveAndNext_Click(object sender, EventArgs e)
    {
        //save the text boxes.
        btnSaveSection_Click(this, new EventArgs());

        NextPage();
    }

    private void NextPage()
    {
        string redirectToPageName = "";

        switch (Session["PageName"].ToString())
        {
            case "DevelopmentalScreening":
                redirectToPageName = "PCChildAssessment.aspx";
                break;

            case "ChildAssessment":
                redirectToPageName = "PCCurriculum.aspx";
                break;

            case "Curriculum":
                redirectToPageName = "PCTransitions.aspx";
                break;

            case "Transitions":
                redirectToPageName = "PCFamilyEngagement.aspx";
                break;

            case "FamilyEngagement":
                redirectToPageName = "PCProfessionalDevelopment.aspx";
                break;

            case "ProfessionalDevelopment":
                redirectToPageName = "PCComprehensiveServices.aspx";
                break;

            case "ComprehensiveServices":
                redirectToPageName = "CollaborationsSharedServices.aspx";
                break;

            case "CollaborationsSharedServices":
                redirectToPageName = "FCCSystemSupportStructure.aspx";
                break;

            case "FCCSystemsSupportStructure":
                redirectToPageName = "FCCSystemsServicesToProviders.aspx";
                break;

            case "FCCSystemsServicesToproviders":
                redirectToPageName = "VoluntaryPilot.aspx";
                break;

            default:
                redirectToPageName = "default.aspx";
                break;
        }

        Response.Redirect(redirectToPageName);
    }
}
